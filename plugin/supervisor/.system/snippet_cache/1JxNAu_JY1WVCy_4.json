{"self":{"style":{"left":"0%","top":"0%","width":"100%","height":"100%","z-index":1000,"position":"fixed","overflow":"auto","visibility":"hidden"},"props":{"type":"Box","geom":{"bpg":[2,1],"bpv":[6,5]}}},"html":"<div lx class=\"lx-abspos\" style=\"right:0%;left:0%;bottom:0%;top:0%;background-color:black;opacity:0.5;\"><\/div><div lx class=\"lx-abspos lxps-grid-v\" style=\"width:40%;left:30%;height:auto;top:40%;background-color:white;border-width:1px;border-color:#000000;border-style:solid;border-radius:8px;padding-top:10px;padding-bottom:10px;padding-left:10px;padding-right:10px;grid-row-gap:10px;\"><div lx class=\"lxps-grid-v\" style=\"position:relative;min-height:40px;height:auto;grid-template-columns:repeat(2,1fr);grid-row-gap:10px;grid-column-gap:10px;grid-template-rows:repeat(1,1fr);\"><div lx class=\"lx-Button\" style=\"position:relative;min-height:40px;min-width:40px;grid-area:1\/1\/2\/2;\"><div lx class=\"lx-TextBox\" style=\"width:auto;height:auto;\">#lx:i18nOKi18n:lx#<\/div><\/div><div lx class=\"lx-Button\" style=\"position:relative;min-height:40px;min-width:40px;grid-area:1\/2\/2\/3;\"><div lx class=\"lx-TextBox\" style=\"width:auto;height:auto;\">#lx:i18nClosei18n:lx#<\/div><\/div><\/div><\/div>","lx":[{"geom":"1,3|5,7","type":"Rect","renderIndex":0},{"key":"stream","geom":"1,2|5,6","type":"Box","renderIndex":1,"__ps":"lx.StreamPositioningStrategy;ds:1;if:3;i:10px,10px,10px,10px,10px,10px;t:1;d:1"},{"key":"buttons","type":"Box","renderIndex":2,"__ps":"lx.GridPositioningStrategy;ds:1;if:3;i:10px,10px,0,0,0,0;c:2;t:1;m:11"},{"key":"ok","type":"Button","renderIndex":3},{"key":"text","geom":"2,1|6,5","type":"TextBox","renderIndex":4},{"key":"close","type":"Button","renderIndex":5},{"key":"text","geom":"2,1|6,5","type":"TextBox","renderIndex":6}],"js":"let onEnterCallback = null;\n\nlet onEnter = function() {\n\tif (onEnterCallback) {\n\t\tvar values = [];\n\t\tif (Snippet.get('stream').contains('r')) {\n\t\t\tvar rows = Snippet.get('stream').childrenByKeys.r;\n\t\t\tif (rows) {\n\t\t\t\tif (!rows.isArray) rows = [rows];\n\t\t\t\trows.each((a)=> values.push(a.childrenByKeys.input.value()));\n\t\t\t}\n\t\t}\n\t\tif (values.len == 1) values = values[0];\n\t\tif (onEnterCallback.isFunction) onEnterCallback(values);\n\t\telse if (onEnterCallback.isArray)\n\t\t\tonEnterCallback[1].call(onEnterCallback[0], values);\n\t} \n\tSnippet.widget.close();\n};\n\nlet onEscape = function() {\n\tSnippet.widget.close();\n};\n\nSnippet.widget.open = function(captions, defaults, callback) {\n\tif (!captions.isArray) captions = [captions];\n\tif (defaults.isFunction) {\n\t\tcallback = defaults;\n\t\tdefaults = {};\n\t}\n\n\tvar buttons = this.childrenByKeys.stream.childrenByKeys.buttons;\n\n\tthis.childrenByKeys.stream.del('r');\n\tcaptions.each((caption)=>{\n\t\tvar row = new lx.Box({\n\t\t\tkey: 'r',\n\t\t\tbefore: buttons\n\t\t});\n\t\trow.gridProportional({ step: '10px', cols: 2 });\n\n\t\tvar textBox = row.add(lx.Box, {\n\t\t\ttext : caption,\n\t\t\twidth: 1\n\t\t});\n\t\ttextBox.align(lx.CENTER, lx.MIDDLE);\n\t\tvar input = row.add(lx.Input, {\n\t\t\tkey: 'input',\n\t\t\twidth: 1\n\t\t});\n\t\tif (defaults[caption] !== undefined) input.value(defaults[caption]);\n\n\t\trow.height( textBox.childrenByKeys.text.height('px') + 10 + 'px' );\n\t});\n\n\tvar top = (this.height('px') - this.childrenByKeys.stream.height('px')) * 0.5;\n\tif (top < 0) top = 0;\n\tthis.childrenByKeys.stream.top(top + 'px');\n\n\tthis.show();\n\tonEnterCallback = callback;\n\n\tlx.keydown(13, onEnter);\n\tlx.keydown(27, onEscape);\n\n\tvar rows = this.childrenByKeys.stream.childrenByKeys.r;\n\tif (rows.isArray) rows[0].childrenByKeys.input.focus();\n\telse rows.childrenByKeys.input.focus();\n};\n\nSnippet.widget.close = function() {\n\tthis.hide();\n\n\tlx.keydownOff(13, onEnter);\n\tlx.keydownOff(27, onEscape);\n\tonEnterCallback = null;\n};\n\nSnippet.find('ok').click(onEnter);\nSnippet.find('close').click(()=> Snippet.widget.close());"}